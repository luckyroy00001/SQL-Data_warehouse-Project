/*
===============================================================================
Stored Procedure: Load Silver Layer (Bronze -> Silver)
===============================================================================
Script Purpose:
    This stored procedure performs the ETL (Extract, Transform, Load) process to 
    populate the 'silver' schema tables from the 'bronze' schema.
	Actions Performed:
		- Truncates Silver tables.
		- Inserts transformed and cleansed data from Bronze into Silver tables.
		
Parameters:
    None. 
	  This stored procedure does not accept any parameters or return any values.

Usage Example:
    EXEC Silver.load_silver;
===============================================================================
*/


CREATE OR ALTER PROCEDURE silver.load_silver AS
	BEGIN 
			DECLARE @start_time DATETIME , @end_time DATETIME, @batch_start DATETIME, @batch_end DATETIME
		BEGIN
				BEGIN TRY
					SET @batch_start = GETDATE()
					PRINT'==============================================';
					PRINT'Loading Silver Layer';
					PRINT'==============================================';
					PRINT'';
					PRINT'';
					PRINT'---------------------------------------------';
					PRINT'Loading CRM Tables';
					PRINT'---------------------------------------------';
					PRINT''
					PRINT''
					SET @start_time = GETDATE()
					--Loading silver.crm_cust_info
					PRINT'>>Truncating Table: silver.crm_cust_info';
					TRUNCATE TABLE silver.crm_cust_info;
					PRINT'>>Inserting Data Into : silver.crm_cust_info';
					INSERT INTO silver.crm_cust_info(
	
							cst_id,
							cst_key,
							cst_firstname,
							cst_lastname,
							cst_marital_status,
							cst_gndr,
							cst_create_date
					)

					SELECT
					cst_id,
					cst_key,
						TRIM(cst_firstname) AS cst_firstname,
						TRIM(cst_lastname) AS cst_lastname,
					CASE 
						WHEN cst_marital_status ='M' THEN 'Married'
						WHEN cst_marital_status ='S' THEN 'Single'
						ELSE 'N/A'
					END cst_marital_status,    <--------------------- Normalize marital status values to readable format

					CASE 
						WHEN cst_gndr = 'F' THEN 'Female'
						WHEN cst_gndr = 'M' THEN 'Male'
						ELSE 'N/A'
					END cst_gndr,   <---------------------------------------- Normalize gender values to readable format
					cst_create_date
					FROM (
							SELECT *,
							ROW_NUMBER() OVER (PARTITION BY cst_id ORDER BY cst_create_date DESC) AS flag_last
							FROM bronze.crm_cust_info
							WHERE cst_id IS NOT NULL
					)t 
					WHERE 
						flag_last = 1   <------------------------- Select the most recent record per customer

					SET @end_time = GETDATE();
					PRINT'>>Load Duration:'+ CAST(DATEDIFF(SECOND ,@start_time,@end_time) AS NVARCHAR)+' '+'Second';
					PRINT'----------------';
					PRINT'';
					PRINT'';

					SET @start_time = GETDATE();
					PRINT'>>Truncating Table: silver.crm_prd_info';
					TRUNCATE TABLE silver.crm_prd_info;
					PRINT'>>Inserting Data Into :silver.crm_prd_info';
					--Loading silver.crm_prd_info
					insert into silver.crm_prd_info(

						prd_id,
						cat_id,
						prd_key,
						prd_nm,
						prd_cost,
						prd_line,
						prd_start_dt,
						prd_end_dt
	
					)


					SELECT
					prd_id,
					REPLACE(SUBSTRING(prd_key,1,5),'-','_') as cat_id, <--------------- Extract category ID
					SUBSTRING(prd_key,7,LEN(prd_key)) as prd_key,  <---------------------- Extract product key
					prd_nm,
					ISNULL(prd_cost,0) AS prd_cost,
					CASE UPPER(TRIM(prd_line))
						WHEN 'M' THEN 'Mountain'
						WHEN 'R' THEN 'Road'
						WHEN 'S' THEN 'Other Sales'
						WHEN 'T' THEN 'Touring'
						ELSE 'N/A'
					END prd_line,<--------------- Map product line codes to descriptive values
					CAST(prd_start_dt AS DATE) AS prd_start_dt,
					CAST(LEAD(prd_start_dt)OVER(PARTITION BY prd_key ORDER BY prd_start_dt )-1 AS DATE) AS prd_end_dt  <-------------- Calculate end date as one day before the next start date
					FROM bronze.crm_prd_info
					SET @end_time = GETDATE();
					PRINT'>>Load Duration:'+ CAST(DATEDIFF(SECOND ,@start_time,@end_time) AS NVARCHAR)+' '+'Second';
					PRINT'----------------';
					PRINT'';
					PRINT'';

					SET @start_time = GETDATE()
					--Loading silver.crm_sales_details
					PRINT'>>Truncating Table: silver.crm_sales_details'
					TRUNCATE TABLE silver.crm_sales_details;
					PRINT'>>Inserting Data Into :silver.crm_sales_details'

					INSERT INTO silver.crm_sales_details(

						sls_ord_num,
						sls_prd_key,
						sls_cust_id,
						sls_order_dt,
						sls_ship_dt,
						sls_due_dt,
						sls_sales,
						sls_quantity,
						sls_price
					)

					SELECT 
					sls_ord_num,  
					sls_prd_key, 
					sls_cust_id, 
						CASE	WHEN sls_order_dt = 0 OR  LEN(sls_order_dt) != 8 THEN NULL
								ELSE CAST(CAST(sls_order_dt AS VARCHAR) AS DATE)
						END sls_order_dt,
	 
						CASE	WHEN sls_ship_dt = 0 OR LEN(sls_ship_dt) !=8 THEN NULL
								ELSE CAST(CAST(sls_ship_dt AS NVARCHAR) AS  DATE)
						END sls_ship_dt, 
	 
 						CASE	WHEN sls_due_dt = 0 OR LEN(sls_due_dt) !=8 THEN NULL
 								ELSE CAST(CAST(sls_due_dt AS NVARCHAR) AS DATE)
 						END sls_due_dt,
 
  
 						CASE	WHEN sls_sales IS NULL OR sls_sales <=0 OR sls_sales != sls_quantity * ABS(sls_price)
 								THEN sls_quantity * ABS(sls_price)
 								ELSE sls_sales
 						END sls_sales,  <----------------------- Recalculate sales if original value is missing or incorrect
					 sls_quantity,
 						CASE		WHEN sls_price <= 0 OR sls_price IS NULL 
 									THEN sls_price / NULLIF(sls_price,0) 
 									ELSE sls_price
 						END sls_price 
					FROM bronze.crm_sales_details 
					SET @end_time = GETDATE();
					PRINT'>>Load Duration:'+ CAST(DATEDIFF(SECOND ,@start_time,@end_time) AS NVARCHAR)+' '+'Second';
					PRINT'----------------';
				
   

					PRINT''
					PRINT''
					SET @start_time = GETDATE()
					--Loading silver.erp_cust_az12
					PRINT'>>Truncating Table: silver.erp_cust_az12'
					TRUNCATE TABLE silver.erp_cust_az12;
					PRINT'>>Inserting Data Into :silver.erp_cust_az12'

					INSERT INTO silver.erp_cust_az12(
	
							CID,BDATE,GEN
					)


					SELECT 
						CASE 
							WHEN  CID LIKE 'NAS%' THEN SUBSTRING(CID,4,LEN(CID)) <------------ Remove 'NAS' prefix if present
							ELSE CID
						END CID,

					CASE 
						WHEN BDATE> GETDATE() THEN NULL
						ELSE BDATE
					END BDATE, <------------- Set future birthdates to NULL
					CASE	
						WHEN UPPER(TRIM(GEN)) IN ('F','Female') THEN 'Female'
						WHEN UPPER(TRIM(GEN)) IN ('M','Male')   THEN 'MALE'
						ELSE 'N/A'
					END GEN <------------------ Normalize gender values and handle unknown cases
					FROM bronze.erp_cust_az12
					SET @end_time = GETDATE();
					PRINT'>>Load Duration:'+ CAST(DATEDIFF(SECOND ,@start_time,@end_time) AS NVARCHAR)+' '+'Second';
					PRINT'----------------';
				

					PRINT''
					PRINT''
					SET @start_time = GETDATE()
					--Loading silver.erp_loc_a101
					PRINT'>>Truncating Table: silver.erp_loc_a101'
					TRUNCATE TABLE silver.erp_loc_a101;
					PRINT'>>Inserting Data Into :silver.erp_loc_a101'

					INSERT INTO silver.erp_loc_a101(
	
							CID,
							CNTRY
					)
					SELECT 

					REPLACE(CID,'-','') AS CID,
					CASE	WHEN TRIM(CNTRY) = 'DE' THEN 'Germany'
							WHEN TRIM(CNTRY) IN ('US','USA') THEN 'UNITED STATES'
							WHEN TRIM(CNTRY) = '' OR CNTRY IS NULL THEN 'N/A'
							ELSE CNTRY
					END CNTRY  <-------------------- Normalize and Handle missing or blank country codes
					FROM bronze.erp_loc_a101
					SET @end_time = GETDATE();
					PRINT'>>Load Duration:'+ CAST(DATEDIFF(SECOND ,@start_time,@end_time) AS NVARCHAR)+' '+'Second';
					PRINT'----------------';
				

					PRINT''
					PRINT''
					SET @start_time = GETDATE()
					--Loading silver.erp_px_cat_g1v2
					PRINT'>>Truncating Table: silver.erp_px_cat_g1v2'
					TRUNCATE TABLE silver.erp_px_cat_g1v2;
					PRINT'>>Inserting Data Into :silver.erp_px_cat_g1v2'


					INSERT INTO silver.erp_px_cat_g1v2(

						ID,
						CAT,
						SUBCAT,
						MAINTENANCE

					)
					SELECT
					ID,
					CAT,
					SUBCAT,
					MAINTENANCE
					FROM bronze.erp_px_cat_g1v2
					SET @end_time = GETDATE();
					PRINT'>>Load Duration:'+ CAST(DATEDIFF(SECOND ,@start_time,@end_time) AS NVARCHAR)+' '+'Second';
					PRINT'----------------';
					PRINT'';
					PRINT'';
					SET @batch_end = GETDATE();
					PRINT'==================================';
					PRINT'Loading Silver Layer Completed';
					PRINT'----->>Total Load Duration:'+ CAST(DATEDIFF(SECOND ,@start_time,@end_time) AS NVARCHAR)+' '+'Second';
					PRINT'==================================';
					PRINT'';
					PRINT'';


				END TRY
				BEGIN CATCH
				PRINT'====================================================';
				PRINT'ERROR OCCURED DURING SILVER LAYER ';
				PRINT'Error Message'+ ERROR_MESSAGE();
				PRINT'Error Message'+ CAST(ERROR_NUMBER() AS NVARCHAR);
				PRINT'Error Message'+ CAST(ERROR_STATE() AS NVARCHAR);
			END CATCH
		END
	END	

